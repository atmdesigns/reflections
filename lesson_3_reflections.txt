When would you want to use a remote repository rather than keeping all your work local?
Remote repositories are useful for allowing others to view and/or contribute to your project.  It also allows you to work on your project from anywhere, even if you don't have your local computer.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
Pulling changes manually allows you to control what changes you accept into your project, esp if they're submitted by other contibutors.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Fork is a built in tool only used on GitHub.  It allows you to clone another Github repository into your Github repository, with a link back to the original.
Clones can be used either local - local or Github - local to make a copy of a repository.
Branches are used to allow work on a project that doesn't directly affect the master.  It's used to add features, fix bugs, or allow others to contribute.
You'd use a fork when you need to clone from one Github repository to another.
You'd use a clone to make copies between local repositories or between Github and locals.
You'd use a branch to work on logical changes that aren't ready to be included in master yet and also to allow others to work on your project.

What is the benefit of having a copy of the last known state of the remote stored locally?
You want to keep them in sync so when changes are made, less risk of bugs and conflicts.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
Use another collaboration tool or use a sharing tool like Dropbox.  Version control and tracking would be harder.  Restoring to last 
good working version would be harder.  Controlling when to accept changes would be harder.  I can't think of anything that would make it easier.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
You make changes in a branch when they aren't completed or when you want to test them or you aren't sure if they'll be permanent 
or if you want feedback on them from others before you add them to master. The benefit is that if you're getting feedback and make tweaks,
you can perfect a branch before its folded into master.

